<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KFTamang Blog</title>
    <link>https://KFTamang.github.io/categories/tech/index.xml</link>
    <description>Recent content on KFTamang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://KFTamang.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[倒立振子] 角度の推定</title>
      <link>https://kftamang.github.io/post/inverse_pendulum_3/</link>
      <pubDate>Sat, 04 May 2019 11:41:00 +0900</pubDate>
      
      <guid>https://kftamang.github.io/post/inverse_pendulum_3/</guid>
      <description>

&lt;h1 id=&#34;前回までのまとめ&#34;&gt;前回までのまとめ&lt;/h1&gt;

&lt;p&gt;前回は倒立振子の完成に向けて駆動系（モータ、ギアボックス）の製作を行なった。
そのとき次回は全体のまとめについて記事にすると言ったが、
角度の推定だけでひとつのエントリにした方が良さそうなので分割することにした。&lt;/p&gt;

&lt;h1 id=&#34;姿勢の取得&#34;&gt;姿勢の取得&lt;/h1&gt;

&lt;p&gt;倒立振子が自立するには垂直軸に対する自分の角度を知る必要がある。
このためにジャイロセンサ・加速度センサ複合モジュールである
&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B00K67X810/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;amp;psc=1&#34;&gt;GY-521 MPU-60503軸ジャイロ+3軸加速度センサ&lt;/a&gt;
を用いた。
GY-521はジャイロ・加速度センサチップであるMPU-6050にパスコン、3端子レギュレータなどを合わせて2.54mmピッチに変換したものである。
ArduinoとはI2C方式で通信する。&lt;/p&gt;

&lt;p&gt;ジャイロセンサにより3軸の角速度、加速度センサにより同じく3軸の加速度が取得できる。
ジャイロセンサのみ、または加速度センサのみで現在の角度を求めることも可能ではあるが、
後述する通り両者を組み合わせることで精度を向上させることができる。&lt;/p&gt;

&lt;h2 id=&#34;角度の推定方法&#34;&gt;角度の推定方法&lt;/h2&gt;

&lt;p&gt;ジャイロセンサは角速度を測定するため、測定値を積分することで始点からの角度変化を求めることができる。
しかしこの方法では測定値を足しつづけるため、誤差が蓄積し推定値が真の値からどんどんずれてしまう。&lt;/p&gt;

&lt;p&gt;加速度センサは重力加速度の方向がわかるため、垂直軸からの離角が直接計算できる。
しかし加速度センサはノイズが大きく、瞬間的には角度の計算値は大きく揺れる。
また水平方向に加速運動をしている場合、慣性力と重力加速度の合力が測定されるため計算値に誤差が乗る。&lt;/p&gt;

&lt;p&gt;そこで今回は相補フィルターを用いてジャイロセンサと加速度センサの値から角度を推定した。&lt;/p&gt;

&lt;p&gt;相補フィルタについては各自参照してもらいたいが、長期トレンドとしては加速度センサが、短期トレンドとしてはジャイロセンサが大きな影響を与えるようになっている。&lt;/p&gt;

&lt;p&gt;ジャイロセンサ・加速度センサのテストに用いたコードが以下である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gyro_test&#34;&gt;// MPU-6050 Short Example Sketch
// By Arduino User JohnChi
// August 17, 2014
// Public Domain
#include&amp;lt;Wire.h&amp;gt;

#define dt (0.030)
#define K (0.95)



float angle = 0;
float angle_raw = 0;
float angle_com = 0;
float angle_gyro = 0;
float gyro_offset = 0.0;
float angle_offset = 0.0;

int count = 0;

const int MPU_addr=0x68;  // I2C address of the MPU-6050
int16_t AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ;
void setup(){
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
  Serial.begin(115200);

  // canceling gyro offset
  for(int i=0;i&amp;lt;100;++i){
    Wire.beginTransmission(MPU_addr);
    Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)  
    Wire.endTransmission(false);
    Wire.requestFrom(MPU_addr,14,true);  // request a total of 14 registers
    AcX=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x3B (ACCEL_XOUT_H) &amp;amp; 0x3C (ACCEL_XOUT_L)     
    AcY=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x3D (ACCEL_YOUT_H) &amp;amp; 0x3E (ACCEL_YOUT_L)
    AcZ=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) &amp;amp; 0x40 (ACCEL_ZOUT_L)
    Tmp=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x41 (TEMP_OUT_H) &amp;amp; 0x42 (TEMP_OUT_L)
    GyX=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x43 (GYRO_XOUT_H) &amp;amp; 0x44 (GYRO_XOUT_L)
    GyY=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x45 (GYRO_YOUT_H) &amp;amp; 0x46 (GYRO_YOUT_L)
    GyZ=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x47 (GYRO_ZOUT_H) &amp;amp; 0x48 (GYRO_ZOUT_L)
    gyro_offset += GyZ;
    angle_offset += atan2(AcX,AcY)*180.0/3.14 + 90.0;
  
  }
  gyro_offset /= 100.0;
  angle_offset /= 100.0;
  
  Serial.print(gyro_offset);
  Serial.print(&amp;quot;\n&amp;quot;);
  
}

void loop(){
  ++count;  
  //angle = get_angle();

  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr,14,true);  // request a total of 14 registers
  AcX=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x3B (ACCEL_XOUT_H) &amp;amp; 0x3C (ACCEL_XOUT_L)     
  AcY=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x3D (ACCEL_YOUT_H) &amp;amp; 0x3E (ACCEL_YOUT_L)
  AcZ=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) &amp;amp; 0x40 (ACCEL_ZOUT_L)
  Tmp=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x41 (TEMP_OUT_H) &amp;amp; 0x42 (TEMP_OUT_L)
  GyX=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x43 (GYRO_XOUT_H) &amp;amp; 0x44 (GYRO_XOUT_L)
  GyY=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x45 (GYRO_YOUT_H) &amp;amp; 0x46 (GYRO_YOUT_L)
  GyZ=Wire.read()&amp;lt;&amp;lt;8|Wire.read();  // 0x47 (GYRO_ZOUT_H) &amp;amp; 0x48 (GYRO_ZOUT_L)


  angle = atan2(AcX,AcY)*180.0/3.14 + 90.0 - angle_offset;

  float d_gyro = (GyZ-gyro_offset)*dt/32768*250; 
  angle_gyro += d_gyro; // 32768:max int, 250 deg/sec max rate
  
  
// complimentary filter 
  angle_com = K*(angle_com + d_gyro) + (1-K)*angle;


  Serial.print(angle);
  Serial.print(&amp;quot; &amp;quot;);
  Serial.print(angle_com);
  Serial.print(&amp;quot;\n&amp;quot;);

  delay(100);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動時に実行されるsetup()ではジャイロセンサのオフセットを除去するため、
データを100回取って平均している。
このとき機体は静止していることを前提としているためなるべく動かさないようにする。
以降はこの平均をジャイロセンサの値から引いて使用している。
また、同時に加速度センサも100回の平均を取り、これを垂直の値として使用している。
これは制御の角度原点となるため、ここが垂直になっていないと倒立振子が横に動いていってしまう。&lt;/p&gt;

&lt;p&gt;角度計算のコードのなかでジャイロセンサからの角度の値を積分するのにデータ取得間隔としてdtを掛けている。
このdtはdelay()の値やシリアル通信、そのほかの処理にかかる時間によって変化する。
そのため、処理ごとにデータ取得間隔を実測してdtの値を決定しなければいけない。&lt;/p&gt;

&lt;p&gt;dtの値が間違っていると、ジャイロセンサからの角度の推定値が大きすぎ、または小さすぎてしまうため、機体を回転させると正しい値がでなくなる。（数秒待つと加速度センサの寄与により正しい値になっていく。）&lt;/p&gt;

&lt;p&gt;最後に角度を0度から90度起こし、また0度に戻したときのジャイロセンサ、加速度センサ、相補フィルタ出力の3つを比較したグラフを載せる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://KFTamang.github.io/images/ 2019-05-19 at 20.50.07.png&#34; alt=&#34;angle_plot&#34; /&gt;
青線が加速度センサ、赤線がジャイロセンサ、緑線が相補フィルタ出力となっている。
青の加速度センサはノイズが多く、短期的にはあまり当てにならないことがわかる。
拡大すると見えるが赤のジャイロセンサは0度がずれていっている。（オフセット除去によりドリフトはそれなりに抑えられている。）
&lt;img src=&#34;https://KFTamang.github.io/images/ 2019-05-19 at 20.56.09.png&#34; alt=&#34;angle_plot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;緑の相補フィルタは青のノイズを抑えながら赤に追従し、かつ原点のドリフトを抑えられている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>モータドライバのPWM制御のテスト</title>
      <link>https://kftamang.github.io/post/inverse_pendulum_2/</link>
      <pubDate>Tue, 23 Apr 2019 14:04:18 +0900</pubDate>
      
      <guid>https://kftamang.github.io/post/inverse_pendulum_2/</guid>
      <description>

&lt;h1 id=&#34;これまで&#34;&gt;これまで&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://kftamang.github.io/post/inverse_pendulum_1/&#34;&gt;前回の記事&lt;/a&gt;でモータドライバIC DRV8835の動作テストを行い、
無事にDCモータ(FA-130)が駆動できることを確認しました。
しかしこのままではモータの動作は順方向逆方向に最大出力の運転しかできません。
倒立振子を製作するには、0%から100%の間で出力を連続的に変化させてモータを駆動する必要があります。&lt;/p&gt;

&lt;p&gt;今回はPWM方式を用いてモータの出力を変化させるテストをしました。&lt;/p&gt;

&lt;h1 id=&#34;pwm方式&#34;&gt;PWM方式&lt;/h1&gt;

&lt;p&gt;PWMとはPulse Width Modulationの略で、High/Lowの2値しかとらない信号線一本で連続的な量を送る変調方式の一種です。
周期的なパルスを送信する際に、パルスのDuty比(Highである時間とLowである時間の比)によって連続量を表現します。
受け手の時間応答よりも十分早い周波数でパルスを送ることで、実効的には時間平均が取られた値を送ることができます。
今回使用したArduino nanoではPWMの周波数は約490Hzであり、モータの応答に対して十分早いため回転スピードを連続的に変化させることができます。&lt;/p&gt;

&lt;h1 id=&#34;実験系&#34;&gt;実験系&lt;/h1&gt;

&lt;p&gt;PWM信号を送るため、Arduino nanoを使用しました。
ArduinoはPWM信号を送るためのanalogWrite()関数が用意されており、
簡単に特定のピンから約490HzのPWM信号を出力できます。（一部のピンでは倍の周波数で出る。）
またDRV8835をPHASE/ENABLEモードで動作させるにあたり、順転逆転の制御のためのPHASE信号も必要となります。&lt;/p&gt;

&lt;p&gt;Arduino nanoの3.3V,GND,PIN9,PIN8をそれぞれDRV8835のVCC,GND,AENABLE,APHASEにつなぎました。
PHASE/ENABLEモードで動作させるためDRV8835のMODEピンは3.3Vに直結します。&lt;/p&gt;

&lt;p&gt;DRV8835のVM,GND,AOUT1/AOUT2を電池、モータに繋いで準備完了です。&lt;/p&gt;

&lt;h1 id=&#34;テスト用のarduinoスケッチ&#34;&gt;テスト用のArduinoスケッチ&lt;/h1&gt;

&lt;p&gt;以下にテストに使用したスケッチを置いておきます。
出力を0%からほぼ100%に上げ、また0%に戻すのを順転方向と逆転方向について交互に繰り返すだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp:PWM_test&#34;&gt;int pwm_out = 9;
int phase = 8;
void setup() {
  // put your setup code here, to run once:
  pinMode(pwm_out, OUTPUT);
  pinMode(phase, OUTPUT);
  
}

void loop() {
  // put your main code here, to run repeatedly:
  digitalWrite(phase, HIGH);
  for (int i = 0; i &amp;lt; 25; ++i) {
    analogWrite(pwm_out, i * 10);
    delay(200);
  }
  for (int i = 25; i &amp;gt; 0; --i) {
    analogWrite(pwm_out, i * 10);
    delay(200);
  }
  digitalWrite(phase, LOW);
  for (int i = 0; i &amp;lt; 25; ++i) {
    analogWrite(pwm_out, i * 10);
    delay(200);
  }
  for (int i = 25; i &amp;gt; 0; --i) {
    analogWrite(pwm_out, i * 10);
    delay(200);
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;結果&#34;&gt;結果&lt;/h1&gt;

&lt;p&gt;意図したとおりにモータの出力が変化してくれます。
車輪に目印を貼って回転速度がわかる様にすればよかったですね。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;PWMでのモーター制御 &lt;a href=&#34;https://t.co/Poghg9aePv&#34;&gt;pic.twitter.com/Poghg9aePv&lt;/a&gt;&lt;/p&gt;&amp;mdash; 宇宙のタマン族@NT金沢6/29,30 (@KFTamang) &lt;a href=&#34;https://twitter.com/KFTamang/status/1120312074247081985?ref_src=twsrc%5Etfw&#34;&gt;April 22, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;h1 id=&#34;次回予告&#34;&gt;次回予告&lt;/h1&gt;

&lt;p&gt;次はいよいよ傾きセンサと組み合わせていきたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ギアボックスとモータ駆動系の製作</title>
      <link>https://kftamang.github.io/post/inverse_pendulum_1/</link>
      <pubDate>Sun, 21 Apr 2019 12:49:27 +0900</pubDate>
      
      <guid>https://kftamang.github.io/post/inverse_pendulum_1/</guid>
      <description>

&lt;h1 id=&#34;倒立振子製作にむけて&#34;&gt;倒立振子製作にむけて&lt;/h1&gt;

&lt;p&gt;倒立振子（とうりつしんし）とは、棒の先に重りをつけた振子を逆さに立てた系のことです。
当然そのままでは倒れてしまいますが、制御を加えることで逆立ちを維持させることができます。
フィードバック制御の課題としてよく取り上げられる題材であり、わたしはArduinoの練習ということで製作してみたいと思います。&lt;/p&gt;

&lt;h1 id=&#34;今回の内容&#34;&gt;今回の内容&lt;/h1&gt;

&lt;p&gt;倒立振子には制御を行う演算系と、実際の制御を行う機械系が必要になります。
今回は機械系としてDCモータでタイヤを駆動する1次元系にしました。&lt;/p&gt;

&lt;p&gt;以下に部品のリストを示します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tamiya.com/japan/products/70093/index.html&#34;&gt;3速クランクギアボックスセット - タミヤ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tamiya.com/japan/products/94380/index.html&#34;&gt;DCモータ FA-130 - タミヤ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tamiya.com/japan/products/70096/index.html&#34;&gt;オフロードタイヤセット - タミヤ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akizukidenshi.com/catalog/g/gK-09848/&#34;&gt;ＤＲＶ８８３５使用ステッピング＆ＤＣモータドライバモジュール - 秋月電子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;モータは親の顔よりよく見たミニ４駆用DCモータです。これはマブチモータ互換品であり、マブチ製品の型番はFA-130RAというようです。
性能表は&lt;a href=&#34;https://product.mabuchi-motor.co.jp/detail.html?id=9&#34;&gt;ここ&lt;/a&gt;にあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://KFTamang.github.io/images/ScreenShot2019-04-21at131244.png&#34; alt=&#34;モータ性能表&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これを見ると、電圧は1.5-3.0Vのようです。ネット上でロボコンなどの記事を見ると過電圧をかけることも可能なようですが、
定格に準拠したいと思います。&lt;/p&gt;

&lt;p&gt;今回はこのモータを秋月のドライバICキットで動かすところまでやりたいと思います。&lt;/p&gt;

&lt;h1 id=&#34;ギアボックス-モータの組み立てと動作確認&#34;&gt;ギアボックス、モータの組み立てと動作確認&lt;/h1&gt;

&lt;p&gt;説明書に沿って組み立てます。ギア比は中速(&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;58&lt;/sub&gt;.2減速)を選びました。
モータを3Vに接続してのテストがこちら。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;タミヤ始め &lt;a href=&#34;https://t.co/LkaVeCp9Dz&#34;&gt;pic.twitter.com/LkaVeCp9Dz&lt;/a&gt;&lt;/p&gt;&amp;mdash; 宇宙のタマン族@NT金沢6/29,30 (@KFTamang) &lt;a href=&#34;https://twitter.com/KFTamang/status/1119834419919855616?ref_src=twsrc%5Etfw&#34;&gt;April 21, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;h1 id=&#34;ドライバicによるモータ制御&#34;&gt;ドライバICによるモータ制御&lt;/h1&gt;

&lt;p&gt;秋月のモータドライバICキットでモータをコントロールできるかテストします。
今回購入したキットにはDRV8835が使用してあります。
この&lt;a href=&#34;http://akizukidenshi.com/download/ds/ti/drv8835.pdf&#34;&gt;DRV8835のデータシート&lt;/a&gt;を見ると、
定格1.5Aのチャンネルが二つあり、並列に繋げることで最大3Aまでドライブできるようです。
FA-130の性能表を見ると無負荷(NO LOAD)で0.20A、静止時(STALL)で2.20Aの電流が流れるとのことです。
本番では偶然壁にぶつかってしまうこともあると思うので2chを並列に接続しますが、
今のテストでは1chだけでいいでしょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://KFTamang.github.io/images/ScreenShot2019-04-21at144952.png&#34; alt=&#34;DRV8835&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ブレッドボードに動作テスト用の回路を組みます。
DRV8835に電源を与えて入力の2つの入力のロジックレベルを変えてやると、
表にしたがって回転方向が変化します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://KFTamang.github.io/images/P_20190421_155506_vHDR_Auto.jpg&#34; alt=&#34;ブレッドボードテスト&#34; /&gt;
ブレッドボードでテストをしている様子。
モバイルバッテリーから電圧を3.3Vへ落としてICへ供給している。反対側にはモータ駆動用の電池が繋がっている。&lt;/p&gt;

&lt;p&gt;入出力の対応には2種類のモードがあり、それぞれIN/INモードとPHASE/ENABLEモードと呼ばれています。
IN/INモードではCoast(空転)が使えますが、ReverseのときにON/OFFがややこしくなります。
その点、PHASE/ENABLEモードではCoastが使えない代わりに、ReverseでもON/OFFの操作がForwardと同じになります。&lt;/p&gt;

&lt;p&gt;倒立振子の運動を考えると、常に制御していないと倒れてしまうことからCoastは必要ない代わりに、
運動は前進と後進が対称です。
PWMで速度の調整を行いたいことから、動作モードはPHASE/ENABLEが適していることがわかりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://KFTamang.github.io/images/ScreenShot2019-04-21at154930.png&#34; alt=&#34;ロジック表&#34; /&gt;
入力と出力の対応表。&lt;/p&gt;

&lt;p&gt;次回はArduinoを用いてPWMでの回転速度制御を行う予定です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>赤外線リモコンをラズパイから操作する</title>
      <link>https://kftamang.github.io/post/environment_monitor_2/</link>
      <pubDate>Sat, 20 Apr 2019 21:47:09 +0900</pubDate>
      
      <guid>https://kftamang.github.io/post/environment_monitor_2/</guid>
      <description>

&lt;h1 id=&#34;前回のまとめと今回の内容&#34;&gt;前回のまとめと今回の内容&lt;/h1&gt;

&lt;p&gt;前回の記事で室内の環境モニタを構築し、slack上から部屋の温湿度を確認することができるようになりました。
しかし、目的はこれで終わりではなく、あくまで部屋の空調を外部から操作できるようにすることにあります。
そのためにラズパイからエアコンを操作できるようにします。&lt;/p&gt;

&lt;h1 id=&#34;ラズパイから赤外線リモコンの操作&#34;&gt;ラズパイから赤外線リモコンの操作&lt;/h1&gt;

&lt;p&gt;ラズパイからエアコンを操作する場合、もっともよく用いられる方法は赤外線LEDを使用してリモコンのコードを再現し、
リモコンから操作を受けているようエアコンに誤認させる方法です。
そのメリットとして、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数百円の電子部品で製作可能&lt;/li&gt;
&lt;li&gt;多くの機種に対応&lt;/li&gt;
&lt;li&gt;エアコン以外の家電操作にも応用可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった特徴があるからです。
そのほかには、&lt;a href=&#34;https://nature.global/&#34;&gt;Nature Remo&lt;/a&gt;という製品があります。
これも赤外線のコードを送信することによりAPI経由で様々な家電を操作できるようです。
ただ、価格は7000円程度とエアコンを動かすだけにはもったいないお値段がします。
なにより自分で作ったほうがやってる感がある。
というわけで以下のサイトを参考に赤外線を送受信する回路を組んでみました。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://qiita.com/takjg/items/e6b8af53421be54b62c9&#34;&gt;格安スマートリモコンの作り方 - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://vintagechips.wordpress.com/2013/10/05/%E8%B5%A4%E5%A4%96%E7%B7%9Aled%E3%83%89%E3%83%A9%E3%82%A4%E3%8
3%96%E5%9B%9E%E8%B7%AF%E3%81%AE%E6%B1%BA%E5%AE%9A%E7%89%88/&#34;&gt;赤外線LEDドライブ回路の決定版 - 電脳伝説&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;回路図&#34;&gt;回路図&lt;/h1&gt;

&lt;p&gt;雑な回路図を示します。実際の配線に即した図となっています。
&lt;img src=&#34;https://KFTamang.github.io/images/P_20190420_222808_vHDR_Auto.jpg&#34; alt=&#34;回路図&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;ブレッドボードによる仮組み&#34;&gt;ブレッドボードによる仮組み&lt;/h1&gt;

&lt;p&gt;いきなりユニバーサル基板に実装して失敗すると目も当てられないので、
まずブレッドボードに仮組みして動作確認をしました。&lt;/p&gt;

&lt;p&gt;赤外線なので目には見えませんが、スマートフォンで写真を撮ると光っていることが確認できます。
&lt;img src=&#34;https://KFTamang.github.io/images/P_20190415_234335_vHDR_On.jpg&#34; alt=&#34;ブレッドボード&#34; /&gt;&lt;/p&gt;

&lt;p&gt;LEDの発光が確認できたら、さらにエアコンの操作ができるかチェックを行います。
赤外線受信モジュールにリモコンを向けてボタンを押し、コードを記録します。
その次にLEDをエアコンに向けてコードを再現すると、押したボタンの操作が実行されました。
動作確認成功です。&lt;/p&gt;

&lt;p&gt;LEDの電流を制限する抵抗の値は最初明るさを重視して27ohmとしましたが、
54ohmでも操作できたため、以後この値を使用しました。（27ohmでは連続運転の絶対定格に違反するため）&lt;/p&gt;

&lt;h1 id=&#34;ユニバーサル基板に本組み&#34;&gt;ユニバーサル基板に本組み&lt;/h1&gt;

&lt;p&gt;動作確認がとれたところで部品を一旦外し、ユニバーサル基板に実装していきます。
仮組み試験の際、LEDには強い指向性があることが判明したため、LEDを二つ向きをずらしながら実装しています。
完成した基板がこちら。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://KFTamang.github.io/images/P_20190416_234655_vHDR_On.jpg&#34; alt=&#34;ユニバーサル基板&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらでも動作確認を行い、エアコンやテレビが操作できることがわかりました。&lt;/p&gt;

&lt;p&gt;次回はこれを使い、slack上からエアコンを操作することにしたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>環境モニタの製作</title>
      <link>https://kftamang.github.io/post/environment_monitor/</link>
      <pubDate>Sat, 13 Apr 2019 01:16:41 +0900</pubDate>
      
      <guid>https://kftamang.github.io/post/environment_monitor/</guid>
      <description>

&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;これから夏がやってくるとクーラーのお世話になる時間がながくなります。
出かけている間にクーラーを付けっ放しにするのは（おそらく）不経済であるため、
住人が全員外出してるのにクーラーがオンの状態になっているときはアラートを出して、
外出先から運転を停止されることができると便利です。
また、冬場には部屋を閉め切って暖房を使うため、二酸化炭素の濃度が上昇し
生産性や健康に害を及ぼす可能性があります。
そのほかの空気中のガスをモニターしておくことで換気などのアラートを出すことができます。&lt;/p&gt;

&lt;p&gt;また、気温や湿度のログを取っておくことで、電気節約や結露防止対策などの有効性検討の材料とすることができます。&lt;/p&gt;

&lt;p&gt;以上の点から共有スペースの気温・湿度、有害物質気体の濃度などを計測的に測定し、
ログを残すとともにエアコンや換気扇を操作できるようにします。&lt;/p&gt;

&lt;h1 id=&#34;機器の構成&#34;&gt;機器の構成&lt;/h1&gt;

&lt;p&gt;使用した部品は以下の表に示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ラズベリーパイ3 モデルB+&lt;/li&gt;
&lt;li&gt;温湿度センサ DHT11&lt;/li&gt;
&lt;li&gt;炭素皮膜抵抗 1k ohm&lt;/li&gt;
&lt;li&gt;温度・気圧センサ BMP280 *&lt;/li&gt;
&lt;li&gt;赤外線LED *&lt;/li&gt;
&lt;li&gt;赤外線受信モジュール *&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(ただし*印は未実装)&lt;/p&gt;

&lt;p&gt;機器の構成は絵のとおり、ラズパイのGPIOにDHT11を接続し気温・湿度を取得します。
接続していませんが、温度・気圧センサであるBMP280はI2C通信でラズパイと接続します。
気温・湿度・気圧は10分ごとに計測し、IFTTT経由でGoogle Driveのスプレッドシートに記録します。
またラズパイ上ではslackとの通信を行うslackbotを走らせ、
専用チャンネルに「温度」を含む文章の投稿に反応して温湿度を投稿するようにしています。&lt;/p&gt;

&lt;p&gt;まだ未実装ですが、赤外線送信用のLEDと赤外線受信モジュールをGPIOに接続し、
IRLRというPythonライブラリを利用して家電（今のところエアコン）を操作できるようにする予定です。&lt;/p&gt;

&lt;h1 id=&#34;動作&#34;&gt;動作&lt;/h1&gt;

&lt;p&gt;スクリーンショットのようにslackの投稿に反応して部屋の温度・湿度を返してくれます。
&lt;img src=&#34;https://KFTamang.github.io/images/environmental_sonsor.png&#34; alt=&#34;動作&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考文献&#34;&gt;参考文献&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://qiita.com/takjg/items/e6b8af53421be54b62c9&#34;&gt;格安スマートリモコンの作り方 - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://vintagechips.wordpress.com/2013/10/05/%E8%B5%A4%E5%A4%96%E7%B7%9Aled%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E5%9B%9E%E8%B7%AF%E3%81%AE%E6%B1%BA%E5%AE%9A%E7%89%88/&#34;&gt;赤外線LEDドライブ回路の決定版 - 電脳伝説&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>